configfile: "config.yml"

def get_populations():
    populations = {}
    with open(config['populations_file']) as f:
        for line in f:
            line = line.strip().split()
            populations[line[0]] = line[1:]
    
    return populations

def get_chromosomes():
    chromosomes = []
    with open(config["chromosome_file"], 'r') as f:
        for line in f:
            line = line.strip()
            chromosomes.append(line)

    return chromosomes

def population_list():
    return get_populations().keys()

rule all:
    input:
        expand("results/{pop}/{pop}.msmc2", pop=population_list())

def chrom_depth_mask_output():
    chromosomes = get_chromosomes()
    return expand("results/{{population}}/{chromosome}/individuals/{{individual}}.depth_mask.bed.gz", chromosome=chromosomes)

rule ind_depth_mask:
    input:
        expand("{bam_dir}/{{individual}}{bam_extension}.bam", bam_dir=config["bam_dir"], bam_extension=config["final_bam_extension"]),
        config["genome"]
    output:
        "results/{population}/{chromosome}/individuals/{individual}.depth_mask.bed.gz"
    threads: 1
    log:
        "logs/depth_mask/{population}/{chromosome}/{individual}.log"
    run:
        #chromosomes = get_chromosomes()
        #for i, chromosome in enumerate(chromosomes):
        depth = float(shell(f"samtools depth -r {wildcards.chromosome} {{input[0]}} | awk '{{{{sum += $3}}}} END {{{{print sum /NR}}}}'", read=True))
        shell(f"""bcftools mpileup -B -q 20 -Q 20 -r {wildcards.chromosome} -f {{input[1]}} {{input[0]}} | bcftools call -c -V indels | msmc-tools/bamCaller.py {depth} {output} > {{log}} 2>&1""")

def chrom_vcf_output():
    chromosomes = get_chromosomes()
    return expand("results/{{population}}/{chromosome}/individuals/{{individual}}.vcf.gz", chromosome=chromosomes)


rule ind_vcf:
    input:
        config["vcf_file"]
    output:
        chrom_vcf_output()
    threads: 1
    log:
        "logs/vcf/{population}/{individual}.log"
    run:
        chromosomes = get_chromosomes()
        for i, chromosome in enumerate(chromosomes):
            shell(f"bcftools view -s {{wildcards[individual]}} --min-ac 1 -Oz -o {output[i]} {{input}} {chromosome}")
            shell(f"bcftools index {output[i]}")

def ind_vcf_mask_input(wildcards):
    population = wildcards["population"]
    chromosome = wildcards["chromosome"]
    individuals = get_populations()[population]
    vcf_files = expand("results/{population}/{chromosome}/individuals/{individual}.vcf.gz", population=population, chromosome=chromosome, individual=individuals)
    mask_files = expand("results/{population}/{chromosome}/individuals/{individual}.depth_mask.bed.gz", population=population, chromosome=chromosome, individual=individuals)

    return {"vcf": vcf_files, "mask": mask_files}

rule multihetsep:
    input:
        unpack(ind_vcf_mask_input)
    output:
        "results/{population}/{chromosome}/{population}.multihetsep.txt"
    threads: 1
    log:
        "logs/multihetsep/{population}/{chromosome}.log"
    run:
        mask_args = " ".join(["--mask " + mask for mask in input["mask"]])
        shell("msmc-tools/generate_multihetsep.py --chr {wildcards[chromosome]} " + mask_args + " {input[vcf]} > {output} 2> {log}")

def chrom_multihetsep_files(wildcards):
    chromosomes = get_chromosomes()
    population = wildcards["population"]

    return expand("results/{population}/{chromosome}/{population}.multihetsep.txt", population=population, chromosome=chromosomes)

rule msmc2:
    input:
        chrom_multihetsep_files
    output:
        "results/{population}/{population}.msmc2"
    threads: 8
    resources:
        mem_mb=400000
    log:
        "logs/msmc2/{population}.log"
    shell:
        "msmc2 -t {threads} -r 1.5 -o {output} {input} > {log} 2>&1"
